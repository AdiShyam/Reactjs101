{"version":3,"sources":["CommentDetail.jsx","ApprovalCard.jsx","App.js","serviceWorker.js","index.js"],"names":["CommentDetail","props","date","Date","console","log","constructor","react_default","a","createElement","className","href","alt","src","imageUrl","author","getMinutes","content","ApprovalCard","children","App","faker","name","findName","text","lorem","image","avatar","src_ApprovalCard","src_CommentDetail","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oKAoBeA,EAjBO,SAACC,GACrB,IAAMC,EAAO,IAAIC,KAEf,OADFC,QAAQC,IAAIH,EAAKI,eAEXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,UACpBH,EAAAC,EAAAC,cAAA,OAAKG,IAAI,SAASC,IAAKZ,EAAMa,WAC5Bb,EAAMc,QAETR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQR,EAAKc,eAE/BT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQT,EAAMgB,WCEtBC,EAdM,SAAAjB,GAEnB,OADAG,QAAQC,IAAIJ,GAEVM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWT,EAAMkB,UAChCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAf,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAf,cCmBKU,EAxBH,WACV,IAAML,EAASM,IAAMC,KAAKC,SACpBC,EAAOH,IAAMI,MAAMD,KACnBE,EAAQL,IAAMK,MAAMC,OAC1B,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BAGJF,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAD,CAAed,OAAQA,IAAUE,QAASO,IAAQV,SAAUY,OAE9DnB,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAD,CAAed,OAAO,MAAME,QAASO,IAAQV,SAAUY,OAEzDnB,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAD,CAAed,OAAO,OAAOE,QAASO,IAAQV,SAAUY,SCZ5CI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.de066f6b.chunk.js","sourcesContent":["import React from 'react';\r\nimport faker from 'faker';\r\n\r\nconst CommentDetail = (props) => {\r\n  const date = new Date();\r\n  console.log(date.constructor());\r\n    return (\r\n        <div className=\"comment\">\r\n        <a href=\"/\" className=\"avatar\">\r\n          <img alt='avatar' src={props.imageUrl} />\r\n          {props.author}\r\n        </a>\r\n        <div className=\"metadate\">\r\n          <span className=\"date\">{date.getMinutes()}</span>\r\n        </div>\r\n        <div className=\"text\">{props.content}</div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default CommentDetail;","import React from \"react\";\r\n// import CommentDetail from './CommentDetail'\r\n\r\nconst ApprovalCard = props => {\r\n  console.log(props);\r\n  return (\r\n    <div className=\"ui card\">\r\n      <div className=\"content\">{props.children}</div>\r\n      <div className=\"extra content\">\r\n        <div className=\"ui two buttons\">\r\n          <div className=\"ui basic green button\">Approve</div>\r\n          <div className=\"ui basic red button\">reject</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ApprovalCard;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CommentDetail from \"./CommentDetail\";\nimport faker from \"faker\";\nimport ApprovalCard from \"./ApprovalCard\";\n\nconst App = () => {\n  const author = faker.name.findName;\n  const text = faker.lorem.text;\n  const image = faker.image.avatar;\n  return (\n    <div className=\"ui container comments\">\n      <ApprovalCard>\n        <div>\n          <h1>Are you sure?</h1>\n        </div>\n      </ApprovalCard>\n      <ApprovalCard>\n        <CommentDetail author={author()} content={text()} imageUrl={image()} />\n      </ApprovalCard>\n      <ApprovalCard>\n        <CommentDetail author=\"Tom\" content={text()} imageUrl={image()} />\n      </ApprovalCard>\n      <ApprovalCard>\n        <CommentDetail author=\"Jack\" content={text()} imageUrl={image()} />\n      </ApprovalCard>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}